{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/macbookpro/Projects/web/dipongo_app/store.js\";\nimport { createContext, useContext, ReactNode, useState, useEffect } from \"react\";\nimport { useRouter } from 'next/router';\nconst authContextDefaultValues = {\n  session: null,\n  updateSession: () => {},\n  deleteSession: () => {}\n};\nconst AuthContext = /*#__PURE__*/createContext(authContextDefaultValues);\nexport function useAuth() {\n  return useContext(AuthContext);\n}\nexport function AuthProvider({\n  children\n}) {\n  const {\n    0: session,\n    1: setSession\n  } = useState(null);\n\n  const updateSession = s => {\n    setSession(s);\n  };\n\n  const deleteSession = () => {\n    setSession(null);\n\n    if (false) {\n      localStorage.removeItem(\"user\");\n    }\n\n    router.push('/');\n  };\n\n  const value = {\n    session,\n    updateSession,\n    deleteSession\n  };\n  let isAuth = false;\n  const publicPath = ['/', '/login', '/signin'];\n  const router = useRouter();\n  useEffect(() => {\n    if (false) {\n      isAuth = localStorage.getItem(\"user\") !== null;\n      setSession({\n        name: 'nj'\n      });\n      /* if(!isAuth){\n           if(!publicPath.includes(router.pathname)){\n               router.push('/')\n           }\n       }*/\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n      value: value,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}","map":{"version":3,"sources":["/Users/macbookpro/Projects/web/dipongo_app/store.js"],"names":["createContext","useContext","ReactNode","useState","useEffect","useRouter","authContextDefaultValues","session","updateSession","deleteSession","AuthContext","useAuth","AuthProvider","children","setSession","s","localStorage","removeItem","router","push","value","isAuth","publicPath","getItem","name"],"mappings":";;;AAAA,SAAQA,aAAR,EAAuBC,UAAvB,EAAmCC,SAAnC,EAA8CC,QAA9C,EAAwDC,SAAxD,QAAwE,OAAxE;AACA,SAASC,SAAT,QAA0B,aAA1B;AAEA,MAAMC,wBAAwB,GAAG;AAC7BC,EAAAA,OAAO,EAAE,IADoB;AAE7BC,EAAAA,aAAa,EAAE,MAAM,CAAE,CAFM;AAG7BC,EAAAA,aAAa,EAAE,MAAM,CAAE;AAHM,CAAjC;AAKA,MAAMC,WAAW,gBAAGV,aAAa,CAACM,wBAAD,CAAjC;AAEA,OAAO,SAASK,OAAT,GAAmB;AACtB,SAAOV,UAAU,CAACS,WAAD,CAAjB;AACH;AAED,OAAO,SAASE,YAAT,CAAsB;AAAEC,EAAAA;AAAF,CAAtB,EAAoC;AACvC,QAAM;AAAA,OAACN,OAAD;AAAA,OAAUO;AAAV,MAAwBX,QAAQ,CAAC,IAAD,CAAtC;;AACA,QAAMK,aAAa,GAAIO,CAAD,IAAO;AACzBD,IAAAA,UAAU,CAACC,CAAD,CAAV;AACH,GAFD;;AAGA,QAAMN,aAAa,GAAG,MAAM;AACxBK,IAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,eAAkC;AAC9BE,MAAAA,YAAY,CAACC,UAAb,CAAwB,MAAxB;AACH;;AACDC,IAAAA,MAAM,CAACC,IAAP,CAAY,GAAZ;AACH,GAND;;AAOA,QAAMC,KAAK,GAAG;AACVb,IAAAA,OADU;AAEVC,IAAAA,aAFU;AAGVC,IAAAA;AAHU,GAAd;AAKA,MAAIY,MAAM,GAAG,KAAb;AACA,QAAMC,UAAU,GAAG,CAAC,GAAD,EAAK,QAAL,EAAc,SAAd,CAAnB;AACA,QAAMJ,MAAM,GAAGb,SAAS,EAAxB;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZ,eAAkC;AAC9BiB,MAAAA,MAAM,GAAIL,YAAY,CAACO,OAAb,CAAqB,MAArB,MAAiC,IAA3C;AACAT,MAAAA,UAAU,CAAC;AAACU,QAAAA,IAAI,EAAC;AAAN,OAAD,CAAV;AACD;AACX;AACA;AACA;AACA;AACS;AAEJ,GAXQ,EAWN,EAXM,CAAT;AAaA,sBACI;AAAA,2BACI,QAAC,WAAD,CAAa,QAAb;AAAsB,MAAA,KAAK,EAAEJ,KAA7B;AAAA,gBACKP;AADL;AAAA;AAAA;AAAA;AAAA;AADJ,mBADJ;AAOH","sourcesContent":["import {createContext, useContext, ReactNode, useState, useEffect} from \"react\";\nimport { useRouter } from 'next/router'\n\nconst authContextDefaultValues = {\n    session: null,\n    updateSession: () => {},\n    deleteSession: () => {},\n};\nconst AuthContext = createContext(authContextDefaultValues);\n\nexport function useAuth() {\n    return useContext(AuthContext);\n}\n\nexport function AuthProvider({ children }) {\n    const [session, setSession] = useState(null);\n    const updateSession = (s) => {\n        setSession(s);\n    };\n    const deleteSession = () => {\n        setSession(null);\n        if (typeof window !== \"undefined\"){\n            localStorage.removeItem(\"user\");\n        }\n        router.push('/')\n    };\n    const value = {\n        session,\n        updateSession,\n        deleteSession\n    };\n    let isAuth = false;\n    const publicPath = ['/','/login','/signin'];\n    const router = useRouter()\n\n    useEffect(() => {\n        if (typeof window !== \"undefined\"){\n            isAuth  = localStorage.getItem(\"user\") !== null;\n            setSession({name:'nj'})\n           /* if(!isAuth){\n                if(!publicPath.includes(router.pathname)){\n                    router.push('/')\n                }\n            }*/\n        }\n\n    }, [])\n\n    return (\n        <>\n            <AuthContext.Provider value={value}>\n                {children}\n            </AuthContext.Provider>\n        </>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}