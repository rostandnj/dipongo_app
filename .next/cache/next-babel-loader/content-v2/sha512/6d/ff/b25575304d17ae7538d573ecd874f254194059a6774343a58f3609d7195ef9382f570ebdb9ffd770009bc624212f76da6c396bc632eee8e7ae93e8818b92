{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { createContext, useContext, ReactNode, useState, useEffect } from \"react\";\nimport { useRouter } from 'next/router';\nimport jwt_decode from \"jwt-decode\";\nimport axios from \"axios\";\nimport { URL } from \"./urlapi\";\nimport { message } from \"antd\";\nvar authContextDefaultValues = {\n  session: null,\n  updateSession: function updateSession() {},\n  deleteSession: function deleteSession() {},\n  initSession: function initSession() {}\n};\nvar AuthContext = /*#__PURE__*/createContext(authContextDefaultValues);\nexport function useAuth() {\n  return useContext(AuthContext);\n}\nexport function AuthProvider(_ref) {\n  var children = _ref.children;\n\n  var _useState = useState(null),\n      session = _useState[0],\n      setSession = _useState[1];\n\n  var updateSession = function updateSession(s) {\n    console.log('updated');\n\n    if (true) {\n      if (s.running_session !== undefined && s.running_session !== null) {\n        localStorage.setItem(\"session\", JSON.stringify(s.running_session));\n        setSession({\n          session: s.running_session\n        });\n      } else {\n        localStorage.setItem(\"session\", null);\n        router.push('/onboard').then(function (r) {});\n      }\n    }\n  };\n\n  var deleteSession = function deleteSession() {\n    if (true) {\n      setSession(null);\n      var token = localStorage.getItem(\"token\");\n      localStorage.removeItem(\"user\");\n      localStorage.removeItem(\"token\");\n      localStorage.removeItem(\"session\");\n\n      if (token !== null) {\n        axios.get(URL + '/api/leave/game', {\n          headers: {\n            'Authorization': 'Bearer ' + token\n          }\n        }).then(function (result) {\n          router.push('/').then(function (res) {});\n        })[\"catch\"](function (error) {\n          router.push('/').then(function (res) {});\n        });\n      } else {\n        router.push('/').then(function (res) {});\n      }\n    }\n  };\n\n  var initSession = function initSession(data) {\n    if (true) {\n      if (data.running_session === null) {\n        localStorage.setItem(\"session\", null);\n      } else {\n        localStorage.setItem(\"session\", JSON.stringify(data.running_session));\n      }\n\n      localStorage.setItem(\"token\", data.token);\n      localStorage.setItem(\"user\", JSON.stringify(data.user));\n    }\n\n    setSession(data);\n\n    if (data.running_session !== null) {\n      router.push('/roadmap');\n    } else {\n      router.push('/onboard');\n    }\n  };\n\n  var clearStorage = function clearStorage() {\n    localStorage.removeItem(\"user\");\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"session\");\n  };\n\n  var value = {\n    session: session,\n    updateSession: updateSession,\n    deleteSession: deleteSession,\n    initSession: initSession\n  };\n  var isAuth = false;\n  var publicPath = ['/', '/login', '/signin'];\n  var router = useRouter();\n  useEffect(function () {\n    if (true) {\n      isAuth = localStorage.getItem(\"user\") !== null;\n\n      if (!isAuth) {\n        if (!publicPath.includes(router.pathname)) {\n          deleteSession();\n          router.push('/');\n        } else {\n          deleteSession();\n          router.push('/');\n        }\n      } else {\n        var token = localStorage.getItem(\"token\");\n        var deT = jwt_decode(token);\n        var exp = deT.exp;\n        var time = Date.now() / 1000;\n\n        if (time > exp) {\n          router.push('/login');\n        } else {\n          axios.get(URL + '/api/user/info', {\n            headers: {\n              'Authorization': 'Bearer ' + token\n            }\n          }).then(function (result) {\n            if (result.data.data.running_session !== null) {\n              setSession({\n                session: result.data.data.running_session\n              });\n              localStorage.setItem(\"session\", JSON.stringify(result.data.data.running_session));\n\n              if (router.pathname === '/') {\n                clearStorage();\n              } else {\n                if (router.pathname.includes('onboard')) {\n                  router.push('/roadmap');\n                }\n              }\n            } else {\n              setSession({\n                session: null\n              });\n              localStorage.removeItem(\"session\");\n              router.push('/onboard');\n            }\n          })[\"catch\"](function (error) {\n            console.log(error);\n\n            if (error.response) {\n              if (error.response.data.code === \"invalid_jwt_token\") {\n                deleteSession();\n              } //message.warning(error.response.data.message)\n\n            } else if (error.request) {\n              console.log(error.request);\n            } else {\n              console.log('Error', error);\n            }\n          });\n        }\n      }\n    }\n  }, []);\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: /*#__PURE__*/_jsx(AuthContext.Provider, {\n      value: value,\n      children: children\n    })\n  });\n}","map":null,"metadata":{},"sourceType":"module"}