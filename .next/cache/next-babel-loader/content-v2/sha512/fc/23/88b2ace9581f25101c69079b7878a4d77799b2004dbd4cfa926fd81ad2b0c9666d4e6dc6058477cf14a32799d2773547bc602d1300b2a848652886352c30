{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/macbookpro/Projects/web/dipongo_app/store.js\";\nimport { createContext, useContext, ReactNode, useState, useEffect } from \"react\";\nimport { useRouter } from 'next/router';\nimport jwt_decode from \"jwt-decode\";\nconst authContextDefaultValues = {\n  session: null,\n  updateSession: () => {},\n  deleteSession: () => {},\n  initSession: () => {}\n};\nconst AuthContext = /*#__PURE__*/createContext(authContextDefaultValues);\nexport function useAuth() {\n  return useContext(AuthContext);\n}\nexport function AuthProvider({\n  children\n}) {\n  const {\n    0: session,\n    1: setSession\n  } = useState(null);\n\n  const updateSession = s => {\n    setSession(s);\n  };\n\n  const deleteSession = () => {\n    setSession(null);\n\n    if (false) {\n      localStorage.removeItem(\"user\");\n      localStorage.removeItem(\"token\");\n      localStorage.removeItem(\"session\");\n    }\n\n    router.push('/');\n  };\n\n  const initSession = data => {\n    setSession(data);\n\n    if (false) {\n      localStorage.setItem(\"token\", data.token);\n      localStorage.setItem(\"user\", JSON.stringify(data.user));\n      localStorage.setItem(\"session\", JSON.stringify(data.running_session));\n    }\n\n    if (session.running_session !== null) {\n      router.push('/roadmap');\n    } else {\n      router.push('/onboard');\n    }\n  };\n\n  const value = {\n    session,\n    updateSession,\n    deleteSession,\n    initSession\n  };\n  let isAuth = false;\n  const publicPath = ['/', '/login', '/signin'];\n  const router = useRouter();\n  useEffect(() => {\n    if (false) {\n      isAuth = localStorage.getItem(\"user\") !== null;\n\n      if (!isAuth) {\n        if (publicPath.includes(router.pathname)) {\n          deleteSession();\n          router.push('/');\n        }\n      } else {\n        console.log(isAuth);\n        let token = localStorage.getItem(\"token\");\n        let deT = jwt_decode(token);\n        let exp = deT.exp;\n        let time = Date.now() / 1000;\n\n        if (time > exp) {\n          router.push('/login');\n        } else {\n          setSession({\n            session: JSON.parse(localStorage.getItem(\"session\")),\n            user: JSON.parse(localStorage.getItem(\"user\"))\n          });\n        }\n      }\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n      value: value,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}","map":{"version":3,"sources":["/Users/macbookpro/Projects/web/dipongo_app/store.js"],"names":["createContext","useContext","ReactNode","useState","useEffect","useRouter","jwt_decode","authContextDefaultValues","session","updateSession","deleteSession","initSession","AuthContext","useAuth","AuthProvider","children","setSession","s","localStorage","removeItem","router","push","data","setItem","token","JSON","stringify","user","running_session","value","isAuth","publicPath","getItem","includes","pathname","console","log","deT","exp","time","Date","now","parse"],"mappings":"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","sourcesContent":["import {createContext, useContext, ReactNode, useState, useEffect} from \"react\";\nimport { useRouter } from 'next/router'\nimport jwt_decode from \"jwt-decode\";\n\nconst authContextDefaultValues = {\n    session: null,\n    updateSession: () => {},\n    deleteSession: () => {},\n    initSession: () => {},\n};\nconst AuthContext = createContext(authContextDefaultValues);\n\nexport function useAuth() {\n    return useContext(AuthContext);\n}\n\nexport function AuthProvider({ children }) {\n    const [session, setSession] = useState(null);\n    const updateSession = (s) => {\n        setSession(s);\n    };\n    const deleteSession = () => {\n        setSession(null);\n        if (typeof window !== \"undefined\"){\n            localStorage.removeItem(\"user\");\n            localStorage.removeItem(\"token\");\n            localStorage.removeItem(\"session\");\n        }\n        router.push('/')\n    };\n    const initSession = (data) => {\n        setSession(data);\n        if (typeof window !== \"undefined\"){\n            localStorage.setItem(\"token\",data.token);\n            localStorage.setItem(\"user\",JSON.stringify(data.user));\n            localStorage.setItem(\"session\",JSON.stringify(data.running_session));\n        }\n        if(session.running_session !== null){\n           router.push('/roadmap')\n        }\n        else{\n           router.push('/onboard')\n        }\n    };\n    const value = {\n        session,\n        updateSession,\n        deleteSession,\n        initSession\n    };\n    let isAuth = false;\n    const publicPath = ['/','/login','/signin'];\n    const router = useRouter()\n\n    useEffect(() => {\n        if (typeof window !== \"undefined\"){\n            isAuth  = localStorage.getItem(\"user\") !== null;\n\n           if(!isAuth){\n               if(publicPath.includes(router.pathname)){\n                   deleteSession();\n                   router.push('/')\n               }\n           }\n           else{\n               console.log(isAuth)\n               let token = localStorage.getItem(\"token\");\n               let deT = jwt_decode(token);\n               let exp = deT.exp;\n               let time = Date.now()/1000;\n               if(time > exp){\n                   router.push('/login')\n               }\n               else{\n                   setSession({session:JSON.parse(localStorage.getItem(\"session\")),\n                       user:JSON.parse(localStorage.getItem(\"user\"))})\n               }\n           }\n        }\n\n    }, [])\n\n    return (\n        <>\n            <AuthContext.Provider value={value}>\n                {children}\n            </AuthContext.Provider>\n        </>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}