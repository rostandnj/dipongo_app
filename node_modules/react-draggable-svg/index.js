'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var tagNameWhitelist = ['svg', 'g', 'text', 'rect', 'circle', 'ellipse', 'line', 'polygon', 'polyline', 'path'];

var cache = {};
var noop = function noop() {};

var DraggableSVG = function DraggableSVG(tagName) {
  var _class, _temp2, _initialiseProps;

  if (cache['DraggableSVG.' + tagName]) return cache['DraggableSVG.' + tagName];
  cache['DraggableSVG.' + tagName] = (_temp2 = _class = function (_Component) {
    _inherits(_class, _Component);

    function _class() {
      var _ref;

      var _temp, _this, _ret;

      _classCallCheck(this, _class);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = _class.__proto__ || Object.getPrototypeOf(_class)).call.apply(_ref, [this].concat(args))), _this), _initialiseProps.call(_this), _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(_class, [{
      key: 'render',
      value: function render() {
        var _this2 = this;

        var props = Object.assign({}, this.props, {
          ref: function ref(_ref2) {
            return _this2.el = _ref2;
          }
        });
        delete props.renderDragElement;
        return _react2.default.createElement(tagName, props);
      }
    }]);

    return _class;
  }(_react.Component), _class.defaultProps = {
    onDrag: noop,
    onDragStart: noop,
    onDragExit: noop,
    onDragEnter: noop,
    onDragLeave: noop,
    onDragEnd: noop,
    renderDragElement: function renderDragElement() {
      return _react2.default.createElement('div', { style: { backgroundColor: '#fff', width: 20, height: 20 } });
    }
  }, _initialiseProps = function _initialiseProps() {
    var _this3 = this;

    this.__moving = false;
    this.__mousedown = false;

    this.componentWillMount = function () {};

    this.componentDidMount = function () {
      var _props$draggable = _this3.props.draggable,
          draggable = _props$draggable === undefined ? true : _props$draggable;

      if (draggable) {
        _this3.el.addEventListener('mousedown', _this3.handleMouseDown);
        _this3.el.addEventListener('mousemove', _this3.handleMouseMove);
        window.addEventListener('mouseup', _this3.handleMouseUp);
      }
    };

    this.componentWillUnmount = function () {
      var _props$draggable2 = _this3.props.draggable,
          draggable = _props$draggable2 === undefined ? true : _props$draggable2;

      if (draggable) {
        _this3.el.removeEventListener('mousemove', _this3.handleMouseMove);
        window.removeEventListener('mouseup', _this3.handleMouseUp);
        _this3.removeDragEl();
      }
    };

    this.createCloneElement = function (data) {
      var _data$event = data.event,
          clientX = _data$event.clientX,
          clientY = _data$event.clientY,
          x = _data$event.x,
          y = _data$event.y;

      var dragEl = document.createElement('div');
      dragEl.style.position = 'fixed';
      dragEl.style.zIndex = 99999;
      dragEl.style.left = x - 5 + 'px';
      dragEl.style.top = y - 5 + 'px';
      dragEl.setAttribute('draggable', true);
      document.body.appendChild(dragEl);
      _reactDom2.default.render(_this3.props.renderDragElement(_this3.el), dragEl);
      dragEl.ondrag = function () {
        var _props;

        dragEl.style.opacity = 0;
        (_props = _this3.props).onDrag.apply(_props, arguments);
      };
      dragEl.ondragstart = function () {
        var _props2;

        (_props2 = _this3.props).onDragStart.apply(_props2, arguments);
      };
      dragEl.ondragenter = function () {
        var _props3;

        (_props3 = _this3.props).onDragEnter.apply(_props3, arguments);
      };
      dragEl.ondragleave = function () {
        var _props4;

        (_props4 = _this3.props).onDragLeave.apply(_props4, arguments);
      };
      dragEl.ondragexit = function () {
        var _props5;

        (_props5 = _this3.props).onDragExit.apply(_props5, arguments);
      };
      dragEl.ondragend = function () {
        var _props6;

        _this3.removeDragEl();
        (_props6 = _this3.props).onDragEnd.apply(_props6, arguments);
      };
      _this3.dragEl = dragEl;
    };

    this.handleMouseDown = function (e) {
      _this3.__mousedown = true;
      _this3.__moving = false;
    };

    this.removeDragEl = function () {
      try {
        _reactDom2.default.unmountComponentAtNode(_this3.dragEl);
        _this3.dragEl.remove();
      } catch (e) {}
    };

    this.handleMouseUp = function (e) {
      _this3.el.setAttribute('opacity', 1);
      _this3.__mousedown = false;
      _this3.__moving = false;
      _this3.removeDragEl();
    };

    this.handleMouseMove = function (e) {
      if (_this3.__mousedown && !_this3.__moving) {
        _this3.__moving = true;
        _this3.createCloneElement({
          event: e,
          text: _this3.props.text
        });
      }
    };

    this.getRef = function () {
      return _this3.el;
    };
  }, _temp2);

  return cache['DraggableSVG.' + tagName];
};

tagNameWhitelist.forEach(function (tagName) {
  Object.defineProperty(DraggableSVG, tagName, {
    get: function get() {
      return DraggableSVG(tagName);
    }
  });
});

module.exports = module.exports.default = DraggableSVG;